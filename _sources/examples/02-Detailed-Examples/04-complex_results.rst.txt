
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-Detailed-Examples/04-complex_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-Detailed-Examples_04-complex_results.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-Detailed-Examples_04-complex_results.py:


.. _ref_complex_results:

Compute Complex Results from Modal or Harmonic Analyses
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This tutorial shows how to access complex results using the DPF-POST
module API.

.. GENERATED FROM PYTHON SOURCE LINES 11-12

**Get started**

.. GENERATED FROM PYTHON SOURCE LINES 12-15

.. code-block:: default

    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 16-17

**Get the solution object**

.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: default

    solution = post.load_solution(examples.complex_rst)
    solution.has_complex_result()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 21-25

**Get displacement result**

This result will contain a field for real values and a field for
imaginary values)

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: default

    disp_result = solution.displacement()








.. GENERATED FROM PYTHON SOURCE LINES 28-29

**Check if the support has complex frequencies**

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    disp_result.has_complex_frequencies()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 32-33

**Compute the result**

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default

    disp = disp_result.vector
    disp.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 37-38

**Deals with phase** (phase unit is degree, phase must be a float)

.. GENERATED FROM PYTHON SOURCE LINES 38-47

.. code-block:: default

    phase = 39.0
    disp_at_phase = disp_result.vector_at_phase(phase)
    print(f"Maximum displacement at phase {phase}:", disp_at_phase.max_data)
    print(f"There are {disp_at_phase.num_fields} fields")
    real_field = disp_result.vector_at_phase(0.0)
    img_field = disp_result.vector_at_phase(90.0)

    real_field





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum displacement at phase 39.0: [[4.64261309e-310 4.64261256e-310 1.58101007e-322]]
    There are 1 fields

    <ansys.dpf.post.result_data.ResultData object at 0x7f9cf4740cd0>



.. GENERATED FROM PYTHON SOURCE LINES 48-49

**Get amplitude**

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    disp_ampl = disp_result.vector_amplitude
    disp_ampl.num_fields
    disp_ampl.max_data




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[4.64261270e-310, 2.76952555e-009, 4.10914321e-010]])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.028 seconds)


.. _sphx_glr_download_examples_02-Detailed-Examples_04-complex_results.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04-complex_results.py <04-complex_results.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04-complex_results.ipynb <04-complex_results.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
