
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-Detailed-Examples/03-result_keywords.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-Detailed-Examples_03-result_keywords.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-Detailed-Examples_03-result_keywords.py:


.. _ref_result_keywords:

ANSYS DPF-POST Use result keywords
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This tutorial shows how to get more precise result with keywords while
calling a result from a solution object.

.. GENERATED FROM PYTHON SOURCE LINES 11-12

**Get started**

.. GENERATED FROM PYTHON SOURCE LINES 12-15

.. code-block:: default

    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 16-17

**Get the solution object**

.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: default


    solution = post.load_solution(examples.multishells_rst)








.. GENERATED FROM PYTHON SOURCE LINES 21-22

**Get the keyword list**

.. GENERATED FROM PYTHON SOURCE LINES 22-24

.. code-block:: default

    post.print_available_keywords()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    element_scoping: list, int or dpf.core.Scoping
    grouping: str. Use post.grouping.(...) as helper.
    location: str. Use post.locations.(...) as helper.
    mapdl_grouping: int. Write 186 to get mapdl_elements solid_186.
    named_selection: str. Name of named_selection.
    node_scoping: list, int or dpf.core.Scoping
    set: int
    time: float
    time_scoping: list, int or dpf.core.Scoping





.. GENERATED FROM PYTHON SOURCE LINES 25-26

**Use a scoping on result**

.. GENERATED FROM PYTHON SOURCE LINES 26-42

.. code-block:: default


    # default location is nodal
    displacement_result = solution.displacement(
        location=post.locations.nodal, node_scoping=[1, 2, 3]
    )
    displacement = displacement_result.vector

    displacement.get_data_at_field(0)

    stress_with_elem_scop_result = solution.stress(
        location=post.locations.elemental_nodal, element_scoping=[1]
    )
    stress_with_elem_scop = stress_with_elem_scop_result.tensor

    stress_with_elem_scop.get_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[-1.89351567e+10, -1.76835359e+10, -1.23315384e+10,
             1.27527844e+10,  5.75103130e+09,  4.30928026e+09],
           [ 2.26888166e+09, -1.98936699e+10, -4.28985472e+09,
             3.73483930e+10,  1.28815250e+07,  2.29405491e+09],
           [ 4.62267494e+09,  4.15775621e+10,  1.28377395e+10,
             1.36264980e+10,  5.61091738e+09,  4.14261606e+09],
           [ 3.07029586e+10,  6.01620111e+10,  9.52341402e+09,
             2.26091377e+10, -1.73616087e+10, -4.64480973e+09],
           [ 3.09432279e+10, -2.77392410e+09, -6.13098650e+09,
             9.00784538e+09,  3.47990848e+08, -2.41304392e+10],
           [ 2.80970793e+10,  5.10227200e+09,  4.87711840e+08,
             1.04294881e+10,  1.77319514e+09, -3.26250573e+09],
           [-3.35771187e+09, -7.58900634e+09, -5.19623475e+09,
            -9.62379008e+08,  7.06462080e+07, -8.84417984e+08],
           [-1.66533110e+10, -5.39330662e+09, -1.18382500e+10,
            -3.91451443e+09,  7.81984448e+08,  1.12681376e+08]])



.. GENERATED FROM PYTHON SOURCE LINES 43-44

**Use a named selection on result**

.. GENERATED FROM PYTHON SOURCE LINES 44-52

.. code-block:: default

    stress_on_ns_result = solution.stress(
        location=post.locations.elemental_nodal, named_selection="SELECTION"
    )
    stress_on_ns = stress_on_ns_result.tensor
    stress_on_ns.num_fields

    len(stress_on_ns[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    5040



.. GENERATED FROM PYTHON SOURCE LINES 53-54

**Get a subresult**

.. GENERATED FROM PYTHON SOURCE LINES 54-61

.. code-block:: default

    disp_x = displacement_result.x

    stress_yz = stress_with_elem_scop_result.yz

    stress_principal_1 = stress_on_ns_result.principal_3
    stress_principal_1





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <ansys.dpf.post.result_data.ResultData object at 0x7f3372f3a290>



.. GENERATED FROM PYTHON SOURCE LINES 62-63

**Filter on a time / time_scoping / a set**

.. GENERATED FROM PYTHON SOURCE LINES 63-75

.. code-block:: default

    print(solution.time_freq_support)

    stress_on_time_1s_result = solution.stress(time=1.0)
    stress_on_time_1s = stress_on_time_1s_result.tensor

    displacement_on_set_1_result = solution.displacement(set=1)
    displacement_on_set_1 = displacement_on_set_1_result.vector

    elastic_strain_with_time_scoping_result = solution.elastic_strain(time_scoping=[1, 3])
    elastic_strain_with_time_scoping = elastic_strain_with_time_scoping_result.tensor
    elastic_strain_with_time_scoping





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF  Time/Freq Support: 
      Number of sets: 1 
    Cumulative     Time (s)       LoadStep       Substep         
    1              1.000000       1              1               


    <ansys.dpf.post.result_data.ResultData object at 0x7f3372ef5b10>



.. GENERATED FROM PYTHON SOURCE LINES 76-77

**Make a grouping**

.. GENERATED FROM PYTHON SOURCE LINES 77-85

.. code-block:: default

    displacement_result = solution.displacement(grouping=post.grouping.by_el_shape)
    displacement_by_el_shape = displacement_result.vector

    # filter only MAPDL elements of type solid 186
    stress_result = solution.stress(mapdl_grouping=186)
    stress_on_solid_186 = stress_result.tensor
    stress_on_solid_186





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <ansys.dpf.post.result_data.ResultData object at 0x7f3372ecab50>



.. GENERATED FROM PYTHON SOURCE LINES 86-87

**Manipulate the result object and change its definition**

.. GENERATED FROM PYTHON SOURCE LINES 87-96

.. code-block:: default

    print(stress_on_ns_result)
    print(stress_on_ns_result.definition.location)

    stress_on_ns_result.definition.location = post.locations.elemental
    stress_on_ns_result.definition.time = 1.0
    stress_on_ns_elemental = stress_on_ns_result.tensor

    print(stress_on_ns_result)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Stress Tensor object. 

    Object properties:
     - location   : ElementalNodal
     - named_selection : SELECTION

    ElementalNodal
    Stress Tensor object. 

    Object properties:
     - location   : Elemental
     - named_selection : SELECTION
     - time       : 1.0





.. GENERATED FROM PYTHON SOURCE LINES 97-100

**Use the misc. results**
Same keywords can be used here. For complex result, the keyword
"phase" (float) can also be used.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. code-block:: default

    stress_ratio = solution.misc.elemental_stress_ratio(node_scoping=[1, 32], time=1.0)
    print(stress_ratio)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Stress result.

    This result has been computed using dpf.core.Operator objects, which
    have been chained together according to the following list:
    - ENL_SRAT: Result operator. Compute the desired result.
    - to_elemental_fc: This operator will compute the elemental averaging of a fields container.






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.274 seconds)


.. _sphx_glr_download_examples_02-Detailed-Examples_03-result_keywords.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 03-result_keywords.py <03-result_keywords.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 03-result_keywords.ipynb <03-result_keywords.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
