
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-Overview/00-overview_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-Overview_00-overview_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-Overview_00-overview_example.py:


.. _ref_overview_example:

ANSYS DPF Overview of the POST API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This tutorial shows quickly how to use the DPF-POST API.  For more
details, you can read the detailed tutorials in the examples gallery.

.. GENERATED FROM PYTHON SOURCE LINES 11-14

Start ansys.post module
=======================
Here we load the post module.

.. GENERATED FROM PYTHON SOURCE LINES 14-16

.. code-block:: default

    from ansys.dpf import post








.. GENERATED FROM PYTHON SOURCE LINES 17-26

Prepare a solution object
=========================
We will first get the solution object that allows to access the
result.  It must be instantiated with the result filepath like
``"C:/Users/user/my_result.rst"`` or on Linux ``"/home/user/my_result.rst"``

In this example, we use a built-in example included with this
module, which you can get by importing the examples module from
``ansys.dpf.post``

.. GENERATED FROM PYTHON SOURCE LINES 26-30

.. code-block:: default

    from ansys.dpf.post import examples

    solution = post.load_solution(examples.multishells_rst)








.. GENERATED FROM PYTHON SOURCE LINES 31-35

Get the mesh and the time_freq_support
======================================
The mesh is the support of the model.
The time freq support is the time/frequence representation of the model.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    mesh = solution.mesh
    time_freq_support = solution.time_freq_support








.. GENERATED FROM PYTHON SOURCE LINES 39-43

Get a result object from the solution object
============================================
The result can be: stress, plastic_strain, elastic_strain, temperature,
displacement).

.. GENERATED FROM PYTHON SOURCE LINES 43-53

.. code-block:: default

    post.print_available_keywords()
    stress = solution.stress(location=post.locations.nodal, time_scoping=[1])

    # both the location and time_scoping are available in the definition of
    # the stress result
    stress.definition.location
    stress.definition.time_scoping

    print(stress)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    element_scoping: list, int or dpf.core.Scoping
    grouping: str. Use post.grouping.(...) as helper.
    location: str. Use post.locations.(...) as helper.
    mapdl_grouping: int. Write 186 to get mapdl_elements solid_186.
    named_selection: str. Name of named_selection.
    node_scoping: list, int or dpf.core.Scoping
    path: DpfPath object that
                contains a list of coordinates,
                e.g. [[0.1, 0.0, 0.0],
                [0.0, 0.1, 0.0]].
    set: int
    time: float
    time_scoping: list, int or dpf.core.Scoping

    Stress Tensor object. 

    Object properties:
     - location   : Nodal
     - time_scoping : [1]





.. GENERATED FROM PYTHON SOURCE LINES 54-60

Compute data
============
Here is shown how to get a subresult such as SX, the stress tensor
in the XX direction.

**SX subresult**

.. GENERATED FROM PYTHON SOURCE LINES 60-71

.. code-block:: default

    sx = stress.xx
    sx.num_fields
    sx_field = sx[0]
    sx_data = sx.get_data_at_field(0)
    print("Length of the data:", len(sx_data))
    print()
    print("Maximum Stress Field:\n", sx.max)
    print()
    print("Maximum data at stress field:", sx.max_data)
    print("Maximum SX at Field 0:", sx.get_max_data_at_field(0))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Length of the data: 6854

    Maximum Stress Field:
     DPF stress_1.s0 Field
      Location: Nodal
      Unit: Pa
      2 entities 
      Data:1 components and 2 elementary data 


    Maximum data at stress field: [1.e-323 4.e-323]
    Maximum SX at Field 0: 4.65134019028945e-310




.. GENERATED FROM PYTHON SOURCE LINES 72-75

**Stress tensor result**
Here we get the minimum and maximum stresses at a field for all
directions, including 'XX', 'XY, 'XZ', 'XY', 'YZ', and 'XZ'.

.. GENERATED FROM PYTHON SOURCE LINES 75-91

.. code-block:: default

    s = stress.tensor
    s_field = s[0]
    s_data = sx.get_data_at_field(0)
    print("Length of the data:", len(s_data))
    print()
    print("Maximum Stress Field:\n", s.max)
    print()
    print("Maximum data at stress field:", s.max_data)
    print("Maximum Stress Tensors at Field 0:\n", s.get_max_data_at_field(0))

    print("Minimum Stress Field:\n", s.min)
    print()
    print("Minimum data at stress field:", s.min_data)
    print("Minimum Stress Tensors at Field 0:\n", s.get_min_data_at_field(0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Length of the data: 6854

    Maximum Stress Field:
     DPF stress_1.s Field
      Location: Nodal
      Unit: Pa
      2 entities 
      Data:6 components and 2 elementary data 


    Maximum data at stress field: [[4.65134065e-310 8.74460905e+011 4.95394439e+011 6.01889079e+011
      1.10325826e+011 1.85580244e+011]
     [1.53671424e+013 4.21781549e+008 3.78202198e+012 2.07950475e+011
      1.57995981e+011 1.09972131e+012]]
    Maximum Stress Tensors at Field 0:
     [4.65134027e-310 8.74460905e+011 4.95394439e+011 6.01889079e+011
     1.10325826e+011 1.85580244e+011]
    Minimum Stress Field:
     DPF stress_1.s Field
      Location: Nodal
      Unit: Pa
      2 entities 
      Data:6 components and 2 elementary data 


    Minimum data at stress field: [[ 4.65134027e-310 -7.35604867e+011 -2.41200931e+011 -2.98145939e+011
      -2.42143056e+011 -3.09138563e+011]
     [-1.49601458e+013 -2.63695614e+008 -3.77945626e+012 -3.35432675e+011
      -1.57190152e+011 -9.66123233e+011]]
    Minimum Stress Tensors at Field 0:
     [ 4.65134064e-310 -7.35604867e+011 -2.41200931e+011 -2.98145939e+011
     -2.42143056e+011 -3.09138563e+011]




.. GENERATED FROM PYTHON SOURCE LINES 92-95

Display a result
================
Use <subresult>.plot_contour() to plot a result.

.. GENERATED FROM PYTHON SOURCE LINES 95-96

.. code-block:: default

    s.plot_contour()



.. image-sg:: /examples/00-Overview/images/sphx_glr_00-overview_example_001.png
   :alt: 00 overview example
   :srcset: /examples/00-Overview/images/sphx_glr_00-overview_example_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.581 seconds)


.. _sphx_glr_download_examples_00-Overview_00-overview_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00-overview_example.py <00-overview_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00-overview_example.ipynb <00-overview_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
