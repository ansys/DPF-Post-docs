
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-Different-analysis-types/01-static-analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-Different-analysis-types_01-static-analysis.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-Different-analysis-types_01-static-analysis.py:


.. _ref_static_analysis:

Static Analysis
~~~~~~~~~~~~~~~
This tutorial shows how post-process a static analysis result file
using API of the POST module.

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Get started
~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 13-16

.. code-block:: default

    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-23

Get the solution object
~~~~~~~~~~~~~~~~~~~~~~~
The following file is the result of a static analysis computed using
Ansys Mechanical.

Here we load the solution

.. GENERATED FROM PYTHON SOURCE LINES 23-28

.. code-block:: default


    example_path = examples.download_all_kinds_of_complexity()
    solution = post.load_solution(example_path)
    print(solution)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Static Analysis Solution object.


    Data Sources
    ------------------------------
    DPF  DataSources: 
      Result files:
         result key: rst and path: /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/ansys/dpf/core/examples/testing/allKindOfComplexity.rst 
      Secondary files:


    DPF Model
    ------------------------------
    Static analysis
    Unit system: MKS: m, kg, N, s, V, A, degC
    Physics Type: Mecanic
    Available results:
         -  displacement: Nodal Displacement
         -  reaction_force: Nodal Force   
         -  element_nodal_forces: ElementalNodal Element nodal Forces
         -  stress: ElementalNodal Stress 
         -  elemental_volume: Elemental Volume
         -  stiffness_matrix_energy: Elemental Energy-stiffness matrix
         -  artificial_hourglass_energy: Elemental Hourglass Energy
         -  thermal_dissipation_energy: Elemental thermal dissipation energy
         -  kinetic_energy: Elemental Kinetic Energy
         -  co_energy: Elemental co-energy
         -  incremental_energy: Elemental incremental energy
         -  elastic_strain: ElementalNodal Strain
         -  thermal_strain: ElementalNodal Thermal Strains
         -  thermal_strains_eqv: ElementalNodal Thermal Strains eqv
         -  swelling_strains: ElementalNodal Swelling Strains
         -  structural_temperature: ElementalNodal Temperature
    ------------------------------
    DPF  Meshed Region: 
      15129 nodes 
      10292 elements 
      Unit: m 
      With solid (3D) elements, shell (2D) elements, shell (3D) elements, beam (1D) elements
    ------------------------------
    DPF  Time/Freq Support: 
      Number of sets: 1 
    Cumulative     Time (s)       LoadStep       Substep         
    1              1.000000       1              1               





.. GENERATED FROM PYTHON SOURCE LINES 29-31

Get result objects
~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 33-35

Get a displacement result
=========================

.. GENERATED FROM PYTHON SOURCE LINES 37-38

**Get the result**

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    disp_result = solution.displacement()
    disp = disp_result.vector
    print(disp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Displacement result.

    This result has been computed using dpf.core.Operator objects, which
    have been chained together according to the following list:
    - U: Result operator. Compute the desired result.





.. GENERATED FROM PYTHON SOURCE LINES 43-44

**Check the number of fields**

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: default

    disp.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 47-48

**Get data from a field**

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    disp.get_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[ 9.84182297e-06,  5.13025031e-06, -6.66435651e-07],
              [ 9.95996777e-06,  4.93526360e-06, -6.25236961e-07],
              [ 9.93154893e-06,  5.88552090e-06, -7.83251832e-07],
              ...,
              [ 5.00000000e-03, -1.54556837e-04,  0.00000000e+00],
              [ 5.00000000e-03, -1.56813550e-04,  0.00000000e+00],
              [ 5.00000000e-03, -1.66125455e-04,  0.00000000e+00]])



.. GENERATED FROM PYTHON SOURCE LINES 51-52

**Get maximum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: default

    disp.max_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[4.64890537e-310, 1.04659292e+001, 3.73620870e+005]])



.. GENERATED FROM PYTHON SOURCE LINES 55-56

**Get minimum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: default

    disp.min_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[ 4.64890537e-310, -1.04473039e+001, -2.94677257e-004]])



.. GENERATED FROM PYTHON SOURCE LINES 59-60

**Get maximum data value over a targeted field**

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: default

    disp.get_max_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([4.64890702e-310, 1.04659292e+001, 3.73620870e+005])



.. GENERATED FROM PYTHON SOURCE LINES 63-64

**Get minimum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    disp.get_min_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([ 4.64890697e-310, -1.04473039e+001, -2.94677257e-004])



.. GENERATED FROM PYTHON SOURCE LINES 67-69

Get a stress result
===================

.. GENERATED FROM PYTHON SOURCE LINES 71-72

**Get the result**

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: default

    stress_result = solution.stress()
    stress = stress_result.tensor
    # shell and solid elements are in distinct fields.
    stress.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 78-79

**Get the shell field**

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: default

    shell_field = stress[0]
    shell_field.shell_layers





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <shell_layers.topbottommid: 4>



.. GENERATED FROM PYTHON SOURCE LINES 83-84

**Get the solid field field**

.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: default

    solid_field = stress[1]








.. GENERATED FROM PYTHON SOURCE LINES 87-88

**Plot the contour**

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    stress.plot_contour()




.. image-sg:: /examples/01-Different-analysis-types/images/sphx_glr_01-static-analysis_001.png
   :alt: 01 static analysis
   :srcset: /examples/01-Different-analysis-types/images/sphx_glr_01-static-analysis_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-93

Get an elastic_strain result
============================

.. GENERATED FROM PYTHON SOURCE LINES 95-96

**Get the result**

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: default

    elastic_strain_result = solution.elastic_strain()
    elastic_strain = elastic_strain_result.tensor
    # shell and solid elements are in distinct fields.
    elastic_strain.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 102-106

**It is also possible to deal with plastic_strain and temperature this way.**
The result file must contain those results.

Here is the plastic strain result

.. GENERATED FROM PYTHON SOURCE LINES 106-108

.. code-block:: default

    print(solution.plastic_strain())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Tensor object. 

    Object properties:
     - location   : Nodal

    This is a plastic strain object.




.. GENERATED FROM PYTHON SOURCE LINES 109-110

and the temperature result

.. GENERATED FROM PYTHON SOURCE LINES 110-111

.. code-block:: default

    print(solution.structural_temperature())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scalar object. 

    Object properties:
     - location   : Nodal

    This is a temperature object.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.354 seconds)


.. _sphx_glr_download_examples_01-Different-analysis-types_01-static-analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01-static-analysis.py <01-static-analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01-static-analysis.ipynb <01-static-analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
