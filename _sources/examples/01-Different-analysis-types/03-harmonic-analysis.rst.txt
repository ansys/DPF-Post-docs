
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-Different-analysis-types/03-harmonic-analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-Different-analysis-types_03-harmonic-analysis.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-Different-analysis-types_03-harmonic-analysis.py:


.. _ref_harmonic_analysis:

ANSYS DPF-Post: Harmonic Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This tutorial shows how post-process a harmonic analysis result file
using API of the DPF-POST module.

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Get started
~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 13-16

.. code-block:: default

    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-23

Get the solution object
~~~~~~~~~~~~~~~~~~~~~~~
The following file is the result of a harmonic analysis computed
using Ansys Mechanical.

Here we load the solution

.. GENERATED FROM PYTHON SOURCE LINES 23-26

.. code-block:: default

    solution = post.load_solution(examples.complex_rst)
    print(solution)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Harmonic Analysis Solution object.


    Data Sources
    ------------------------------
    DPF  DataSources: 
      Result files:
         result key: rst and path: /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/ansys/dpf/core/examples/complex.rst 
      Secondary files:


    DPF Model
    ------------------------------
    Harmonic analysis
    Unit system: MKS: m, kg, N, s, V, A, degC
    Physics Type: Mecanic
    Available results:
         -  displacement: Nodal Displacement
         -  reaction_force: Nodal Force   
         -  stress: ElementalNodal Stress 
         -  elemental_volume: Elemental Volume
         -  stiffness_matrix_energy: Elemental Energy-stiffness matrix
         -  artificial_hourglass_energy: Elemental Hourglass Energy
         -  thermal_dissipation_energy: Elemental thermal dissipation energy
         -  kinetic_energy: Elemental Kinetic Energy
         -  co_energy: Elemental co-energy
         -  incremental_energy: Elemental incremental energy
         -  elastic_strain: ElementalNodal Strain
         -  elemental_heat_generation: Elemental Elemental Heat Generation
         -  structural_temperature: ElementalNodal Temperature
         -  electric_potential: Nodal Electric Potential
         -  electric_flux_density: ElementalNodal Electric flux density
         -  electric_field: ElementalNodal Electric field
    ------------------------------
    DPF  Meshed Region: 
      4802 nodes 
      657 elements 
      Unit: m 
      With solid (3D) elements
    ------------------------------
    DPF  Time/Freq Support: 
      Number of sets: 1 
      With complex values 

    Cumulative     Frequency (Hz) LoadStep       Substep        RPM             
    1              343478.200000  1              1              0.000000        

    This may contain complex results.




.. GENERATED FROM PYTHON SOURCE LINES 27-29

Get result objects
~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 31-33

Get a displacement result
=========================

.. GENERATED FROM PYTHON SOURCE LINES 35-37

**Get the result**: it will contain a field for real values and a
field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    disp_result = solution.displacement()
    disp = disp_result.vector








.. GENERATED FROM PYTHON SOURCE LINES 41-42

**Check the number of fields**

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: default

    disp.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 45-46

**Get data from a field**

.. GENERATED FROM PYTHON SOURCE LINES 46-48

.. code-block:: default

    disp.get_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[ 2.65783929e-09, -5.98949034e-10,  8.34267891e-11],
              [ 2.63846617e-09, -3.00204960e-10,  8.27306877e-11],
              [ 2.50179982e-09, -2.86371281e-10,  6.29386453e-11],
              ...,
              [-1.70840238e-09, -2.73504676e-09,  3.48706947e-11],
              [-1.57038405e-09, -2.71125223e-09,  6.79105278e-11],
              [-1.57311157e-09, -2.71904943e-09,  0.00000000e+00]])



.. GENERATED FROM PYTHON SOURCE LINES 49-50

**Get maximum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    disp.max_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[4.67509277e-310, 4.67508967e-310, 4.10914311e-010],
              [6.53706736e-013, 6.53416337e-013, 9.25220948e-014]])



.. GENERATED FROM PYTHON SOURCE LINES 53-54

**Get minimum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: default

    disp.min_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[ 4.67509191e-310,  4.67508967e-310,  0.00000000e+000],
              [-6.53727285e-013, -6.53452004e-013, -1.66091913e-013]])



.. GENERATED FROM PYTHON SOURCE LINES 57-58

**Get maximum data value over a targeted field**

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    disp.get_max_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([4.67509256e-310, 4.67508967e-310, 4.10914311e-010])



.. GENERATED FROM PYTHON SOURCE LINES 61-62

**Get minimum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    disp.get_min_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([4.67509155e-310, 4.67508967e-310, 0.00000000e+000])



.. GENERATED FROM PYTHON SOURCE LINES 65-67

Get a stress result and deals with amplitude
============================================

.. GENERATED FROM PYTHON SOURCE LINES 69-70

**Get the result**

.. GENERATED FROM PYTHON SOURCE LINES 70-72

.. code-block:: default

    stress_result = solution.stress()








.. GENERATED FROM PYTHON SOURCE LINES 73-74

**Check if the support has complex frequencies**

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: default

    stress_result.has_complex_frequencies()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 77-78

**Get the tensor result**

.. GENERATED FROM PYTHON SOURCE LINES 78-84

.. code-block:: default

    stress = stress_result.tensor
    # shell and solid elements are in distinct fields.
    # so we have four fields : the solid-real one, the solid-imaginary one,
    # the shell-real one and the shell_imaginary one.
    stress.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 85-86

**Get the shell field**

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: default

    shell_field = stress[0]
    shell_field.shell_layers





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <shell_layers.nonelayer: 5>



.. GENERATED FROM PYTHON SOURCE LINES 90-91

**Get the solid field field**

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: default

    solid_field = stress[1]








.. GENERATED FROM PYTHON SOURCE LINES 94-95

**Plot the amplitude contour**

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: default

    amplitude = stress_result.tensor_amplitude
    amplitude.plot_contour()




.. image-sg:: /examples/01-Different-analysis-types/images/sphx_glr_03-harmonic-analysis_001.png
   :alt: 03 harmonic analysis
   :srcset: /examples/01-Different-analysis-types/images/sphx_glr_03-harmonic-analysis_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-101

Get an elastic_strain result and deals with phase
=================================================

.. GENERATED FROM PYTHON SOURCE LINES 103-105

**Get the result**: it will contain a field for real values and a
field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 105-110

.. code-block:: default

    elastic_strain_result = solution.elastic_strain()
    elastic_strain = elastic_strain_result.tensor
    # shell and solid elements are in distinct fields.
    elastic_strain.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 111-112

**Deal with phase**: phase unit is degree, phase must be a float.

.. GENERATED FROM PYTHON SOURCE LINES 112-118

.. code-block:: default

    es_at_phase = elastic_strain_result.tensor_at_phase(39.0)
    es_at_phase.max_data
    es_at_phase.num_fields
    real_field = elastic_strain_result.tensor_at_phase(0.0)
    img_field = elastic_strain_result.tensor_at_phase(90.0)








.. GENERATED FROM PYTHON SOURCE LINES 119-121

**It is also possible to deal with plastic_strain and temperature this way.**
The result file must contain those results.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.932 seconds)


.. _sphx_glr_download_examples_01-Different-analysis-types_03-harmonic-analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03-harmonic-analysis.py <03-harmonic-analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03-harmonic-analysis.ipynb <03-harmonic-analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
